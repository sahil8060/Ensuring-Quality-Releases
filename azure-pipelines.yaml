name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'id_rsa'
    
    # Terraform Installer
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.3'
    
    # Download Terraform tfvars file
    - task: DownloadSecureFile@1
      displayName: 'Terraform tfvars file'
      inputs:
        secureFile: 'terraform.tfvars'
        
    # Copy Terraform tfvars file
    - task: Bash@3
      inputs:
       targetType: 'inline'
       script: 'cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    # Terraform Init
    - task: TerraformTaskV2@2
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'azurerm-sc'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate24194'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(access_key)'
    

    # Terraform Apply
    - task: TerraformTaskV2@2
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc'
    

    # # Terraform Destroy
    # - task: TerraformTaskV2@2
    #   displayName: 'Terraform Destroy'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: 'azurerm-sc'
    
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
#        includeRootFolder: false
#        archiveType: 'zip'
#        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
    
    
#     #- task: ArchiveFiles@2
#     #  displayName: 'Archive Selenium UI Test'
#     #  inputs:
#     #   rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
#     #    includeRootFolder: false
#     #    archiveType: 'zip'
#     #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
#     #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
#     #  displayName: 'Upload Package'
#     #  artifact: drop-Selenium


    # # JMeter Installer
    # - task: JMeterInstaller@0
    #   inputs:
    #     jmeterVersion: '5.4.1'


    # - task: Bash@3
    #   displayName: 'Stress Test'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       $(jmeter_path) -n -t automatedtesting/jmeter/"Stress Test.jmx" \
    #                                  -l log/jmeter/stress-test.csv \
    #                                  -e -f -o log/jmeter/Stress-Test-Report \
    #                                  -j log/jmeter/jmeter.log
    
    # - task: ArchiveFiles@2
    #   displayName: 'Archive Stress Test'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Stress-Test-Report'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Stress-Test-Report.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Stress-Test-Report.zip
    #   displayName: 'Upload Stress Test Jmeter Logs'
    #   artifact: drop-stressTestJmeterLogs
    
    # - task: Bash@3
    #   displayName: 'Endurance Test'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       $(jmeter_path) -n -t automatedtesting/jmeter/"Endurance Test.jmx" \
    #                                  -l log/jmeter/endurance-test.csv \
    #                                  -e -f -o log/jmeter/Endurance-Test-Report \
    #                                  -j log/jmeter/jmeter.log
    
    # - task: ArchiveFiles@2
    #   displayName: 'Archive Endurance Test'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Endurance-Test-Report'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Endurance-Test-Report.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Endurance-Test-Report.zip
    #   displayName: 'Upload Endurance Test Jmeter Logs'
    #   artifact: drop-enduranceTestJmeterLogs
    # - task: NodeTool@0
    #   displayName: 'Install NodeTool'
    #   inputs:
    #     versionSpec: '16.x'
    #     checkLatest: true

    # - task: Bash@3
    #   displayName: 'Install Newman for Postman'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       npm install -g newman
    #       mkdir -p log/newman

    # - task: Bash@3
    #   displayName: 'Regression Test Suite'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       newman run automatedtesting/postman/Regression-Test-Suite.postman_collection.json \
    #                                  -e automatedtesting/postman/Ensuring-Quality-Releases-Env.postman_environment.json \
    #                                  --reporters cli,junit \
    #                                  --reporter-junit-export log/newman/regression-test.xml \
    #                                  --suppress-exit-code

    # - task: PublishPipelineArtifact@1
    #   displayName: 'Publish Regression Test Suite'
    #   inputs:
    #     targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
    #     artifact: 'drop-regressionTestSuite'
    
    # - task: PublishTestResults@2
    #   displayName: 'Publish Regression Test Suite Results'
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/regression-test.xml'
    #     testRunTitle: 'Publish Regression Test Suite Results'
    
#     # - task: ArchiveFiles@2
#     #  displayName: 'Archive Regression Test Suite'
#     #  inputs:
#     #    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/newman'
#     #    includeRootFolder: false
#     #    archiveType: 'zip'
#     #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Regression-Test-Suite.zip'
#     #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Regression-Test-Suite.zip
#     #  displayName: 'Upload Regression Test Suite'
#     #  artifact: drop-regressionTestSuite

    # - task: Bash@3
    #   displayName: 'Data Validation Test Suite'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       newman run automatedtesting/postman/Data-Validation-Test-Suite.postman_collection.json \
    #                                 -e automatedtesting/postman/Ensuring-Quality-Releases-Env.postman_environment.json \
    #                                  --suppress-exit-code \
    #                                  --reporters cli,junit \
    #                                  --reporter-junit-export log/newman/data-validation-test.xml

    # - task: PublishPipelineArtifact@1
    #   displayName: 'Publish Data Validation Test Suite'
    #   inputs:
    #     targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
    #     artifact: 'drop-dataValidationTestSuite'
    
    # - task: PublishTestResults@2
    #   displayName: 'Publish Data Validation Test Suite Results'
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/data-validation-test.xml'
    #     testRunTitle: 'Publish Data Validation Test Suite Results'


#     #- task: ArchiveFiles@2
#     #  displayName: 'Archive Data Validation Test Suite'
#     #  inputs:
#     #    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/newman'
#     #   includeRootFolder: false
#     #    archiveType: 'zip'
#     #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Data-Validation-Test-Suite.zip'
#     #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Data-Validation-Test-Suite.zip
#     #  displayName: 'Upload Data Validation Test Suite'
#     #  artifact: drop-dataValidationTestSuite

#     #- task: NewmanPostman@4
#     #  displayName: 'Regression Test Suite'
#     #  inputs:
#     #    collectionSourceType: 'file'
#     #   collectionFileSource: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/Regression-Test-Suite.postman_collection.json'
#     #    environment: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/Ensuring-Quality-Releases-Env.postman_environment.json'
#     #    reporters: 'cli,junit'
#     #    reporterJUnitExport: '$(System.DefaultWorkingDirectory)/log/newman/regression-test.xml'
    
#     # - task: NewmanPostman@4
#     #  displayName: 'Data Validation Test Suite'
#     #  inputs:
#     #    collectionSourceType: 'file'
#     #    collectionFileSource: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/Data-Validation-Test-Suite.postman_collection.json'
#     #    environment: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/Ensuring-Quality-Releases-Env.postman_environment.json'
#     #    reporters: 'cli, junit'
#     #    reporterJUnitExport: '$(System.DefaultWorkingDirectory)/log/newman/data-validation-test.xml'



# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#        deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: 'azurerm-sc'
#               appName: 'mynewwebapp-AppService'
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
#   - deployment: VMDeploy
#     displayName: VirtualMachine Deploy
#     environment:
#       name:  'TEST'
#       resourceType: VirtualMachine
#       tags: TAG NAME
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 pip3 install selenium
#                 #export PATH=$PATH:some/path
#                 sudo mkdir -p /var/log/selenium
#                 sudo chmod 664 /var/log/selenium
#                 sudo python3 $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py 2>&1 | tee -a /var/log/selenium/selenium.log
#                 sudo touch /var/log/selenium/selenium.log
